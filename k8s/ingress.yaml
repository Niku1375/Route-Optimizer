apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logistics-ingress
  namespace: logistics-routing
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://logistics.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - logistics.example.com
    - api.logistics.example.com
    secretName: logistics-tls
  rules:
  - host: logistics.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: logistics-api-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: logistics-api-service
            port:
              number: 3001
      - path: /health
        pathType: Exact
        backend:
          service:
            name: logistics-api-service
            port:
              number: 80
  - host: api.logistics.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: logistics-api-service
            port:
              number: 80